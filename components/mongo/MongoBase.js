// Generated by CoffeeScript 1.10.0
var mongodb, noflo, url;

noflo = require("noflo");

mongodb = require("mongodb");

url = require("url");

exports.getComponent = function() {
  var MongoClient, c, parseConnectionString;
  MongoClient = mongodb.MongoClient;
  parseConnectionString = function(data) {
    var databaseName, databaseUrl, e, i, ref, serverUrl;
    databaseUrl = (function() {
      var error;
      try {
        return url.parse(data.url);
      } catch (error) {
        e = error;
        return console.log(e);
      }
    })();
    ref = databaseUrl.href.split('/'), i = ref.length - 2, serverUrl = ref[i++], databaseName = ref[i++];
    return serverUrl = 'mongodb://' + data.username + ':' + data.password + '@' + serverUrl + '/' + databaseName;
  };
  c = new noflo.Component;
  c.icon = 'fire';
  c.icon = 'description';
  c.inPorts.add('url', {
    dataType: 'string',
    required: true,
    description: 'Gets the URL to connect to MongoDB instance'
  });
  c.inPorts.add('username', {
    dataType: 'string',
    required: true,
    description: 'Sets the MongoDB username'
  });
  c.inPorts.add('password', {
    dataType: 'password',
    required: true,
    description: 'Sets the MongoDB password'
  });
  c.inPorts.add('selector', {
    dataType: 'string',
    required: true,
    description: 'Sets the selector based on which documents will be returned'
  });
  c.inPorts.add('collection', {
    dataType: 'string',
    required: true,
    description: 'Sets the collection to be used for retrieving documents'
  });
  c.outPorts.add("mongoresult", {
    dataType: 'array'
  });
  return noflo.helpers.WirePattern(c, {
    async: true,
    "in": ['url', 'username', 'password', 'selector', 'collection'],
    out: 'mongoresult'
  }, function(data, groups, out, callback) {
    var serverUrl;
    serverUrl = parseConnectionString(data);
    return MongoClient.connect(serverUrl, function(err, db) {
      var selection_string;
      if (err) {
        return console.log("", err);
      } else {
        selection_string = JSON.parse(data.selector);
        return db.collection(data.collection).find(selection_string).toArray(function(err, items) {
          if (err) {
            return console.log("", err);
          } else {
            return c.outPorts.mongoresult.send(items);
          }
        });
      }
    });
  });
};
